CREATE TABLE ProductDim (
    ProductID INT,
    ProductName VARCHAR(100),
    Price DECIMAL(10, 2),
    VendorName VARCHAR(100),
    CategoryName VARCHAR(100)
);
DATE_FORMAT(TransactionDate, '%Y%m%d') AS CalendarKey,
    TransactionDate AS FullDate,
    DAYNAME(TransactionDate) AS DayOfWeek,
    MONTHNAME(TransactionDate) AS Month,
    CONCAT('Q', QUARTER(TransactionDate)) AS Quarter,
    YEAR(TransactionDate) AS Year


INSERT INTO calendar (full_date, day_of_week, day_of_month, month_of_sale, quarter_of_sale, year_of_sale)
SELECT DISTINCT
    TransactionDate AS full_date,
    DAYNAME(TransactionDate) AS day_of_week,
    DAY(TransactionDate) AS day_of_month,
    MONTHNAME(TransactionDate) AS month_of_sale,
    CONCAT('Q', QUARTER(TransactionDate)) AS quarter_of_sale,
    YEAR(TransactionDate) AS year_of_sale
FROM SalesTransaction
WHERE TransactionDate IS NOT NULL;


INSERT INTO calendar (full_date, day_of_week, day_of_month, month_of_sale, quarter_of_sale, year_of_sale)
SELECT DISTINCT
    TransactionDate AS full_date,
    DATENAME(WEEKDAY, TransactionDate) AS day_of_week,
    DAY(TransactionDate) AS day_of_month,
    DATENAME(MONTH, TransactionDate) AS month_of_sale,
    'Q' + CAST(DATEPART(QUARTER, TransactionDate) AS VARCHAR) AS quarter_of_sale,
    YEAR(TransactionDate) AS year_of_sale
FROM SalesTransaction
WHERE TransactionDate IS NOT NULL;


ALTER TABLE Orders
ADD CONSTRAINT FK_CustomerID FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID);

CREATE TABLE TotalDollar (
    ProductID INT,
    dollarSold DECIMAL(10,2)
);

INSERT INTO TotalDollar (ProductID, dollarSold)
SELECT 
    p.ProductID,
    SUM(s.Quantity * p.Price) AS dollarSold
FROM 
    Product p
JOIN 
    SoldVia s ON p.ProductID = s.ProductID
GROUP BY 
    p.ProductID;



ALTER TABLE Orders
ADD CONSTRAINT FK_CustomerID FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID);


USE SalesDatabase;

INSERT INTO Sales (dollar_sold, unit_sold, store_id, calendar_id, product_id, customer_id)
SELECT 
    SUM(s.Quantity * p.Price) AS dollar_sold,
    s.Quantity AS unit_sold,
    st.store_id, 
    c.calendar_id, 
    p.product_id,
    cu.customer_id
FROM 
    SoldVia s
JOIN 
    Product p ON s.product_id = p.product_id
JOIN 
    Store st ON s.store_id = st.store_id  -- If store_id is not directly in SoldVia
JOIN 
    Calendar c ON s.calendar_id = c.calendar_id  -- If calendar_id is not directly in SoldVia
JOIN 
    Customer cu ON s.customer_id = cu.customer_id  -- If customer_id is not directly in SoldVia
GROUP BY 
    st.store_id, 
    c.calendar_id, 
    p.product_id, 
    cu.customer_id;


USE CanyonRetailDW2;

INSERT INTO Sales (dollar_sold, unit_sold, calendar_id, store_id, product_id, customer_id)
SELECT 
    SUM(s.Quantity * p.Price) AS dollar_sold,  -- Calculate total dollar amount sold
    s.Quantity AS unit_sold,  -- The quantity sold
    cal.calendar_id,  -- Foreign key from Calendar table in CanyonRetailDW2
    st.store_id,  -- Foreign key from Store table in CanyonRetailDW2
    p.product_id,  -- Foreign key from Product table in CanyonRetailOperations
    cu.customer_id  -- Foreign key from Customer table in CanyonRetailDW2
FROM 
    CanyonRetailOperations.SoldVia s  -- Referencing the SoldVia table from CanyonRetailOperations database
JOIN 
    CanyonRetailOperations.Product p ON s.product_id = p.product_id  -- Joining Product table from CanyonRetailOperations to get price
JOIN 
    CanyonRetailDW2.Store st ON s.store_id = st.store_id  -- Join with Store in CanyonRetailDW2 for store_id
JOIN 
    CanyonRetailDW2.Calendar cal ON s.calendar_id = cal.calendar_id  -- Join with Calendar in CanyonRetailDW2 for calendar_id
JOIN 
    CanyonRetailDW2.Customer cu ON s.customer_id = cu.customer_id  -- Join with Customer in CanyonRetailDW2 for customer_id
GROUP BY 
    cal.calendar_id, 
    st.store_id, 
    p.product_id, 
    cu.customer_id;  -- Grouping by foreign keys to calculate dollar_sold and unit_sold

